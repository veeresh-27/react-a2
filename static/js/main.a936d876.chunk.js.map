{"version":3,"sources":["Forms.js","App.js","reportWebVitals.js","index.js"],"names":["Form","useForm","register","handleSubmit","className","onSubmit","data","fn","document","getElementById","ln","em","sub","innerHTML","FirstName","LastName","Email","Subject","htmlFor","type","id","value","App","Forms","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iNA8FeA,EA5FF,WAET,MAAmCC,cAA3BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAYlB,OAAS,sBACDC,UAAY,YADX,UAEL,uBACKC,SAAaF,GAdL,SAACG,GACd,IAAMC,EAAKC,SAASC,eAAe,MAC7BC,EAAKF,SAASC,eAAe,MAC7BE,EAAKH,SAASC,eAAe,SAC7BG,EAAMJ,SAASC,eAAe,OACpCF,EAAGM,UAAY,eAAiBP,EAAKQ,UACrCJ,EAAGG,UAAY,cAAgBP,EAAKS,SACpCJ,EAAGE,UAAY,WAAaP,EAAKU,MACjCJ,EAAIC,UAAY,YAAcP,EAAKW,WAKnC,UAEA,oBACGb,UAAY,UADf,4BAFA,IAG+C,gCAE/C,wBACMc,QAAU,YADhB,yBAEc,IAFd,OAF+C,IAKvC,iDACEhB,EAAS,cADX,IAERiB,KAAO,OACPC,GAAK,kBAXL,IAaM,gCAEN,uBACMF,QAAU,WADhB,wBAFM,IAME,iDACEhB,EAAS,aADX,IAERiB,KAAO,OACPC,GAAK,iBAKL,gCAEA,uBACMF,QAAU,QADhB,oBAFA,IAMQ,iDACEhB,EAAS,UADX,IAERiB,KAAO,QACPC,GAAK,cApCL,IAsCM,gCAEN,uBACMF,QAAU,UADhB,sBAFM,IAME,mDACGhB,EAAS,YADZ,IAERkB,GAAK,UAFG,UAGR,wBACOC,MAAQ,QADf,qBAHQ,IAIkC,wBACnCA,MAAQ,aAD2B,0BAJlC,IAK4C,wBAC7CA,MAAQ,OADqC,oBAL5C,QANF,OAtCN,IAoDM,gCAIN,wBACOF,KAAO,SADd,sBAJM,OApDN,OAFK,IA6DE,sBACHf,UAAY,OADT,UAEP,wBACOgB,GAAK,KACZhB,UAAY,cAFZ,eAFO,IAIgC,wBAChCgB,GAAK,KACZhB,UAAY,cAF2B,eAJhC,IAMgC,wBAChCgB,GAAK,QACZhB,UAAY,cAF2B,eANhC,IAQgC,wBAChCgB,GAAK,MACZhB,UAAY,cAF2B,eARhC,WChEAkB,MAVf,WACI,OAAS,qBACDlB,UAAY,MADX,SAEL,cACAmB,EADA,OCMOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1Be,M","file":"static/js/main.a936d876.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nconst Form = () => {\r\n\r\n    const { register, handleSubmit } = useForm();\r\n    const onSubmit = (data) => {\r\n        const fn = document.getElementById('fn')\r\n        const ln = document.getElementById('ln')\r\n        const em = document.getElementById('email')\r\n        const sub = document.getElementById('sub')\r\n        fn.innerHTML = \"First Name: \" + data.FirstName;\r\n        ln.innerHTML = \"Last Name: \" + data.LastName;\r\n        em.innerHTML = \"E-Mail: \" + data.Email;\r\n        sub.innerHTML = \"Subject: \" + data.Subject;\r\n    }\r\n\r\n    return ( <\r\n        div className = \"container\" >\r\n        <\r\n        form onSubmit = { handleSubmit(onSubmit) } >\r\n        <\r\n        h1 className = \"heading\" > Registration < /h1> <\r\n        div >\r\n        <\r\n        label htmlFor = \"FirstName\" >\r\n        First Name: { \" \" } <\r\n        /label> <\r\n        input {...register(\"FirstName\") }\r\n        type = \"text\"\r\n        id = \"FirstName\" / >\r\n        <\r\n        /div> <\r\n        div >\r\n        <\r\n        label htmlFor = \"LastName\" >\r\n        Last Name:\r\n        <\r\n        /label> <\r\n        input {...register(\"LastName\") }\r\n        type = \"text\"\r\n        id = \"LastName\" / >\r\n        <\r\n        /div>\r\n\r\n\r\n        <\r\n        div >\r\n        <\r\n        label htmlFor = \"Email\" >\r\n        Email:\r\n        <\r\n        /label> <\r\n        input {...register(\"Email\") }\r\n        type = \"email\"\r\n        id = \"Email\" / >\r\n        <\r\n        /div> <\r\n        div >\r\n        <\r\n        label htmlFor = \"Subject\" >\r\n        Subject:\r\n        <\r\n        /label> <\r\n        select {...register(\"Subject\") }\r\n        id = \"Subject\" >\r\n        <\r\n        option value = \"React\" > React < /option> <\r\n        option value = \"Datamining\" > DataMining < /option> <\r\n        option value = \"oops\" > OOPs < /option> <\r\n        /select> <\r\n        /div> <\r\n        div >\r\n\r\n\r\n        <\r\n        button type = \"submit\" > Submit < /button> <\r\n        /div> <\r\n        /form> <\r\n        div className = \"info\" >\r\n        <\r\n        strong id = \"fn\"\r\n        className = \"text-center\" > < /strong> <\r\n        strong id = \"ln\"\r\n        className = \"text-center\" > < /strong> <\r\n        strong id = \"email\"\r\n        className = \"text-center\" > < /strong> <\r\n        strong id = \"sub\"\r\n        className = \"text-center\" > < /strong> <\r\n        /div>\r\n\r\n        <\r\n        /div>\r\n    );\r\n};\r\nexport default Form;","import './App.css';\nimport Forms from './Forms';\n\nfunction App() {\n    return ( <\n        div className = \"App\" >\n        <\n        Forms / >\n        <\n        /div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}